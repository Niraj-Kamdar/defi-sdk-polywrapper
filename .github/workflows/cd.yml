name: CD
on:
  workflow_run:
    workflows: [CI]
    types: [completed]
    branches: [main]

jobs:
  GetVersion:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    outputs:
      version: ${{ steps.GetVersion.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - id: version
        name: Get version
        run: echo ::set-output name=version::$(cat VERSION)

  Github-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs:
      - GetVersion
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.GetVersion.outputs.version }}
          release_name: Release ${{ needs.GetVersion.outputs.version }}
          draft: false
          prerelease: false

  Deploy-Built-Artifacts:
    strategy:
      matrix:
        packageName:
          # Base packages
          - coingecko
          - core-sdk-interface
          - core-sdk

          # Token Resolvers
          - token-resolver-interface
          - ethereum-token-resolver

          # Account Resolvers
          - account-resolver-interface
          - covalent-account-resolver

          # Price Resolvers
          - price-resolver-interface
          - coingecko-price-resolver

          # Protocol Resolvers
          - protocol-resolver-interface
          - ethereum-protocol-resolver

          # Asset Resolvers
          - asset-resolver-interface
          - 1inch-asset-resolver
          - aave-asset-resolver
          - compound-asset-resolver
          - cream-asset-resolver
          - curve-asset-resolver
          - linkswap-asset-resolver
          - sushi-asset-resolver
          - uniswap-asset-resolver
          - yearn-asset-resolver

        packageUri:
          # Base packages
          - coingecko.defiwrapper.eth
          - interface.defiwrapper.eth
          - sdk.defiwrapper.eth

          # Token Resolvers
          - interface.token.resolvers.defiwrapper.eth
          - ethereum.token.resolvers.defiwrapper.eth

          # Account Resolvers
          - interface.account.resolvers.defiwrapper.eth
          - covalent.account.resolvers.defiwrapper.eth

          # Price Resolvers
          - interface.price.resolvers.defiwrapper.eth
          - coingecko.price.resolvers.defiwrapper.eth

          # Protocol Resolvers
          - interface.protocol.resolvers.defiwrapper.eth
          - ethereum.protocol.resolvers.defiwrapper.eth

          # Asset Resolvers
          - interface.asset.resolvers.defiwrapper.eth
          - 1inch.asset.resolvers.defiwrapper.eth
          - aave.asset.resolvers.defiwrapper.eth
          - compound.asset.resolvers.defiwrapper.eth
          - cream.asset.resolvers.defiwrapper.eth
          - curve.asset.resolvers.defiwrapper.eth
          - linkswap.asset.resolvers.defiwrapper.eth
          - sushi.asset.resolvers.defiwrapper.eth
          - uniswap.asset.resolvers.defiwrapper.eth
          - yearn.asset.resolvers.defiwrapper.eth

    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      CI: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Read .nvmrc
        run: echo ::set-output name=NVMRC::$(cat .nvmrc)
        id: nvm
      - name: Setup Node.js
        uses: actions/setup-node@master
        with:
          node-version: "${{ steps.nvm.outputs.NVMRC }}"
      - name: Install pinata cli
        run: npm install -g pinata-upload-cli

      # Setup Pinata
      - name: Setup Pinata
        run: pinata-cli -a ${{ secrets.PINATA_API_KEY }}

      # Deploy Wrappers
      - uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.packageName }}-build-artifact
          path: ./build/${{ matrix.packageName }}
      - id: ${{ matrix.packageName }}-ipfs
        name: Deploy ${{ matrix.packageName }} Wrapper
        run: 'echo ::set-output name=ipfs::$(pinata-cli -u ./build/${{ matrix.packageName }} | grep "IpfsHash: ''[A-Za-z0-9]*''" -o | grep "''[A-Za-z0-9]*''" -o | grep "[A-Za-z0-9]*")'
      - name: IPFS Deployments
        run: "echo ${{ steps.${{ matrix.packageName }}-ipfs.outputs.ipfs }} > ./deployments/${{ matrix.packageName }}.ipfs"
      - id: ${{ matrix.packageName }}-ens
        name: Upload ${{ matrix.packageName }} Wrapper
        run: 'echo ::set-output name=ensExists::$(ethers-ens lookup ${{ matrix.packageUri }} --network rinkeby | grep "Controller: 0x[A-Za-z0-9]*" -o | wc -c)'
      - name: Create ens URI for ${{ matrix.packageName }}
        run: "ethers-ens set-subnode ${{ matrix.packageUri }} --network rinkeby --account ${{ secrets.PRIVATE_KEY }} --yes"
        if: ${{ steps.{{ matrix.packageName }}-ens.outputs.ensExists }} > "0"
      - name: Publish ${{ matrix.packageName }} Wrapper
        run: "ethers-ens set-content ${{ matrix.packageUri }} {{ steps.{{ matrix.packageName }}-ipfs.outputs.ipfs }} --network rinkeby --account ${{ secrets.PRIVATE_KEY }} --yes > ./deployments/${{ matrix.packageName }}.ens"
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.packageName }}-deployment-artifact
          path: ./deployments/${{ matrix.packageName }}.ipfs
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.packageName }}-deployment-artifact
          path: ./deployments/${{ matrix.packageName }}.ens
